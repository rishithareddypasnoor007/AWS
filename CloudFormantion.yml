Parameters:
    EnvironmentName:
        Type: String
        Description: 'Name to be assigned to all the resources'
        Default: Test
    VpcCIDR:
        Type: String
        Description: 'IP range (CIDR notation) for this VPC'
        Default: 10.0.0.0/24
    PublicSubnetCIDR:
        Type: String
        Description: 'IP range (CIDR notation) for the public subnet in the first Availability Zone'
        Default: 10.0.0.0/26
    PrivateSubnet1CIDR:
        Type: String
        Description: 'IP range (CIDR notation) for the private subnet in the first Availability Zone'
        Default: 10.0.0.64/26
    PrivateSubnet2CIDR:
        Type: String
        Description: 'IP range (CIDR notation) for the private subnet in the second Availability Zone'
        Default: 10.0.0.128/26
    AMI:
        Type: String
        Description: 'Image id for the instance'
        Default: ami-0ff8a91507f77f867
Resources:
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    InternetGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    PublicSubnet:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    PrivateSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    PrivateSubnet2:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    NatGatewayEIP:
        Type: 'AWS::EC2::EIP'
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
    NatGateway:
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet
    PublicRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId: !Ref VPC
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    DefaultPublicRoute:
        Type: 'AWS::EC2::Route'
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PublicSubnetRouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
    PrivateRouteTable1:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId: !Ref VPC
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    DefaultPrivateRoute:
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway
    PrivateSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1
    PrivateRouteTable2:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId: !Ref VPC
            Tags: 
             - Key: Name
               Value: !Ref EnvironmentName
    DefaultPrivateRoute2:
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway
    PrivateSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2
    SG1:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Base Security Group                  #security groups need Group Description!!!!
            VpcId: !Ref VPC
            SecurityGroupIngress: 
            - IpProtocol: tcp
              CidrIp: !Ref VpcCIDR
              FromPort: 22
              ToPort: 22
            - IpProtocol: tcp
              CidrIp: !Ref VpcCIDR 
              FromPort: 80
              ToPort: 80
            SecurityGroupEgress:
            - IpProtocol: tcp
              CidrIp: 0.0.0.0/0 
              FromPort: 80
              ToPort: 80
            - IpProtocol: tcp
              CidrIp: 0.0.0.0/0 
              FromPort: 443
              ToPort: 443
            - IpProtocol: tcp
              CidrIp: 103.255.144.218/32
              FromPort: 22
              ToPort: 22
    SG2:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Base Security Group
            VpcId: !Ref VPC
            SecurityGroupIngress: 
            - IpProtocol: tcp
              CidrIp: !Ref VpcCIDR
              FromPort: 22
              ToPort: 22
            - IpProtocol: tcp
              CidrIp: !Ref PrivateSubnet1CIDR
              FromPort: 3306
              ToPort: 3306
            SecurityGroupEgress:           # egress rules shouldhave cidr!!!!
            - IpProtocol: tcp
              CidrIp: 0.0.0.0/0
              FromPort: 80
              ToPort: 80
            - IpProtocol: tcp
              CidrIp: 0.0.0.0/0
              FromPort: 443
              ToPort: 443
    Ec2Instance1:
        Type: 'AWS::EC2::Instance'
        Properties:
            InstanceType: t2.micro
            ImageId: !Ref AMI
            SubnetId: !Ref PrivateSubnet1
            SecurityGroupIds:              #use SecurityGroupIds only!!
            - !Ref SG1
            Tags: 
             - Key: Name
               Value: Host_A
    Ec2Instance2:
        Type: 'AWS::EC2::Instance'
        Properties:
            InstanceType: t2.micro
            ImageId: !Ref AMI
            SubnetId: !Ref PrivateSubnet2
            SecurityGroupIds: 
            - !Ref SG2
            Tags: 
             - Key: Name
               Value: Host_B
